#!/usr/bin/env python3
"""
SimRAG CLI - Simple command line interface
Usage: python run <command>
"""

import os
import sys
import subprocess
from pathlib import Path


def get_python_cmd():
    """Get the correct Python command for the platform"""
    if os.name == 'nt':  # Windows
        return "venv\\Scripts\\python"
    else:  # Unix/Linux/Mac
        return "venv/bin/python"


def check_venv():
    """Check if virtual environment exists"""
    venv_path = Path("venv")
    if not venv_path.exists():
        print("Virtual environment not found!")
        print("Run: python run setup first")
        return False
    return True


def check_venv_health():
    """Check the health of the virtual environment"""
    if not check_venv():
        return False
    
    python_cmd = get_python_cmd()
    
    # Check if Python executable exists and works
    try:
        result = subprocess.run([python_cmd, "--version"], 
                              capture_output=True, text=True, check=True)
        print(f"✅ Python version: {result.stdout.strip()}")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("❌ Python executable not found or not working")
        return False
    
    # Check if pip is working
    try:
        result = subprocess.run([python_cmd, "-m", "pip", "--version"], 
                              capture_output=True, text=True, check=True)
        print(f"✅ Pip version: {result.stdout.strip()}")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("❌ Pip not working")
        return False
    
    # Check if key packages are installed
    key_packages = [
        ("torch", "torch"),
        ("transformers", "transformers"), 
        ("sentence-transformers", "sentence_transformers"),
        ("qdrant-client", "qdrant_client"),
        ("pytest", "pytest"),
        ("pytest-asyncio", "pytest_asyncio"),
        ("httpx", "httpx")
    ]
    missing_packages = []
    
    for package_name, import_name in key_packages:
        try:
            result = subprocess.run([python_cmd, "-c", f"import {import_name}"], 
                                  capture_output=True, text=True, check=True)
            print(f"✅ {package_name} is installed")
        except subprocess.CalledProcessError:
            print(f"❌ {package_name} is missing")
            missing_packages.append(package_name)
    
    if missing_packages:
        print(f"\n⚠️  Missing packages: {', '.join(missing_packages)}")
        return False
    
    print("✅ Virtual environment is healthy!")
    return True




def run_setup():
    """Setup virtual environment and install dependencies (with health check)"""
    print("=== Environment Setup ===")
    
    # Check if venv already exists
    venv_exists = Path("venv").exists()
    
    if venv_exists:
        print("Virtual environment already exists.")
        
        # Check if it's healthy
        print("Checking virtual environment health...")
        is_healthy = check_venv_health()
        
        if is_healthy:
            print("✅ Virtual environment is healthy and ready to use!")
            return 0
        else:
            print("⚠️  Virtual environment exists but has issues.")
            print("Reinstalling dependencies to fix...")
    else:
        print("Creating virtual environment...")
        result = subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        if result.returncode != 0:
            print("❌ Failed to create virtual environment")
            return 1
        print("✅ Virtual environment created")
    
    # Install/upgrade dependencies
    python_cmd = get_python_cmd()
    print("Installing dependencies...")
    
    # Upgrade pip first
    result = subprocess.run([python_cmd, "-m", "pip", "install", "--upgrade", "pip"], check=True)
    if result.returncode != 0:
        print("❌ Failed to upgrade pip")
        return 1
    
    # Install dependencies
    result = subprocess.run([python_cmd, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
    if result.returncode != 0:
        print("❌ Failed to install dependencies")
        return 1
    
    print("✅ Dependencies installed successfully")
    
    # Final health check
    print("Performing final health check...")
    if check_venv_health():
        print("🎉 Setup completed successfully! Virtual environment is ready.")
        return 0
    else:
        print("⚠️  Setup completed but virtual environment may have issues.")
        print("You can run 'python run setup' again to retry.")
        return 1


def run_tests():
    """Run tests with interactive selection"""
    if not check_venv():
        return 1
    
    python_cmd = get_python_cmd()
    
    # Check if user wants to run all tests
    if len(sys.argv) > 2 and sys.argv[2].lower() == "all":
        print("Running all tests...")
        try:
            result = subprocess.run([python_cmd, "-m", "pytest", "src/tests/"], check=True)
            print("All tests passed!")
            return 0
        except subprocess.CalledProcessError as e:
            print(f"Tests failed with exit code {e.returncode}")
            return e.returncode
    
    # Auto-detect test folders
    tests_dir = Path("src/tests")
    if not tests_dir.exists():
        print("No tests directory found!")
        return 1
    
    # Find all test folders
    test_folders = []
    for item in tests_dir.iterdir():
        if item.is_dir() and (item.name.startswith("test_") or item.name.startswith("tests_")):
            test_folders.append(item.name)
    
    if not test_folders:
        print("No test folders found in tests/ directory!")
        return 1
    
    # Interactive test selection
    print("=== Test Selection ===")
    print("")
    
    # Display test options
    print("Available test folders:")
    for i, folder_name in enumerate(test_folders, 1):
        print(f"  {i}. {folder_name}")
    print("  0. Exit")
    print("")
    
    # Get user selection
    try:
        choice = input("Enter test number (0-{}): ".format(len(test_folders))).strip()
        
        if choice == "0":
            print("Exiting...")
            return 0
        
        choice_num = int(choice)
        if 1 <= choice_num <= len(test_folders):
            selected_folder = test_folders[choice_num - 1]
            print(f"\nRunning: {selected_folder}")
            print("=" * 50)
            
            # Run pytest on the selected folder with verbose output
            result = subprocess.run([python_cmd, "-m", "pytest", f"src/tests/{selected_folder}/", "-v", "-s"], check=True)
            
            print(f"\n✅ {selected_folder} completed successfully!")
            return 0
        else:
            print(f"Invalid choice: {choice_num}")
            return 1
            
    except ValueError:
        print("Invalid input. Please enter a number.")
        return 1
    except KeyboardInterrupt:
        print("\nOperation cancelled.")
        return 1
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Test failed with exit code {e.returncode}")
        return e.returncode


def run_demo():
    """Run demos with auto-detection from demos folder"""
    if not check_venv():
        return 1
    
    python_cmd = get_python_cmd()
    
    # Auto-detect demo files
    demos_dir = Path("src/demos")
    if not demos_dir.exists():
        print("No demos directory found!")
        return 1
    
    # Find all demo files
    demo_files = []
    for item in demos_dir.iterdir():
        if item.is_file() and item.name.endswith('_demo.py'):
            if item.name == 'subsystem_demo.py':
                demo_name = "Subsystem (All Specifications)"
            else:
                demo_name = item.stem.replace('_demo', '').replace('_', ' ').title()
            demo_files.append((demo_name, item.stem))
    
    if not demo_files:
        print("No demo files found in demos directory!")
        return 1
    
    # Step 1: Choose demo type
    print("=== Demo Selection ===")
    print("")
    print("Available demos:")
    for i, (name, _) in enumerate(demo_files, 1):
        print(f"  {i}. {name}")
    print("  0. Exit")
    print("")
    
    try:
        choice1 = input(f"Enter demo number (0-{len(demo_files)}): ").strip()
        
        if choice1 == "0":
            print("Exiting...")
            return 0
        
        choice1_num = int(choice1)
        
        if 1 <= choice1_num <= len(demo_files):
            selected_demo_name, selected_demo_file = demo_files[choice1_num - 1]
            
            # Step 2: Choose demo mode
            print(f"\n=== {selected_demo_name} Mode ===")
            print("  1. Automated (predefined queries)")
            print("  2. Interactive (you type questions)")
            print("  0. Back")
            print("")
            
            choice2 = input("Enter mode number (0-2): ").strip()
            
            if choice2 == "0":
                return run_demo()  # Go back to step 1
            
            choice2_num = int(choice2)
            if choice2_num == 1:  # Automated
                print(f"\nRunning: {selected_demo_name} (Automated)")
                print("=" * 50)
                result = subprocess.run([python_cmd, "-c", f"from src.demos.{selected_demo_file} import run_{selected_demo_file}; run_{selected_demo_file}('automated')"], check=True)
            elif choice2_num == 2:  # Interactive
                print(f"\nRunning: {selected_demo_name} (Interactive)")
                print("=" * 50)
                result = subprocess.run([python_cmd, "-c", f"from src.demos.{selected_demo_file} import run_{selected_demo_file}; run_{selected_demo_file}('interactive')"], check=True)
            else:
                print("Invalid choice")
                return 1
                
        else:
            print("Invalid choice")
            return 1
        
        print(f"\n✅ Demo completed successfully!")
        return 0
        
    except ValueError:
        print("Invalid input. Please enter a number.")
        return 1
    except KeyboardInterrupt:
        print("\nOperation cancelled.")
        return 1
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Demo failed with exit code {e.returncode}")
        return e.returncode


def run_config():
    """Show current configuration settings"""
    if not check_venv():
        return 1
    
    print("=== Current Configuration ===")
    print("")
    
    try:
        from config import get_rag_config
        
        rag_config = get_rag_config()
        
        print("Hardware Configuration:")
        print(f"  Platform: {'Laptop' if rag_config.use_laptop else 'PC'}")
        print(f"  Model: {rag_config.model_name}")
        print("")
        
        print("RAG Configuration:")
        print(f"  AI Provider: {'Ollama' if rag_config.use_ollama else 'Purdue API'}")
        print(f"  Storage: {'Persistent' if rag_config.use_persistent else 'In-memory'}")
        print(f"  Collection: {rag_config.collection_name}")
        print(f"  Top-K: {rag_config.top_k}")
        print("")
        
        print("Note: You can override these settings by editing config.py")
        print("or setting environment variables (USE_LAPTOP, USE_OLLAMA, etc.)")
        
    except ImportError as e:
        print(f"Error: Could not import config module: {e}")
        return 1
    
    return 0


def main():
    """Main CLI function"""
    if len(sys.argv) < 2:
        print(" SimRAG CLI")
        print("=" * 20)
        print("Usage: python run <command>")
        print("")
        print("Commands:")
        print("  setup  - Setup virtual environment and install dependencies")
        print("  test   - Interactive test selection menu")
        print("  test all - Run all tests")
        print("  demo   - RAG demo selection (automated/interactive)")
        print("  config - Show current configuration settings")
        print("  help   - Show this help message")
        print("")
        print("Virtual Environment:")
        print("  To activate: venv\\Scripts\\activate (Windows) or source venv/bin/activate (Unix)")
        print("  To deactivate: deactivate")
        return 0
    
    command = sys.argv[1].lower()
    
    if command == "setup":
        return run_setup()
    elif command == "test":
        return run_tests()
    elif command == "demo":
        return run_demo()
    elif command == "config":
        return run_config()
    elif command == "help":
        print(" SimRAG CLI")
        print("=" * 20)
        print("Usage: python run <command>")
        print("")
        print("Commands:")
        print("  setup  - Setup virtual environment and install dependencies")
        print("  test   - Interactive test selection menu")
        print("  test all - Run all tests")
        print("  demo   - RAG demo selection (automated/interactive)")
        print("  config - Show current configuration settings")
        print("  help   - Show this help message")
        print("")
        print("Virtual Environment:")
        print("  To activate: venv\\Scripts\\activate (Windows) or source venv/bin/activate (Unix)")
        print("  To deactivate: deactivate")
        print("")
        print("Examples:")
        print("  python run setup     # First time setup")
        print("  python run test      # Choose which tests to run")
        print("  python run demo      # Choose demo type and mode")
        print("  python run config    # View current settings")
        return 0
    else:
        print(f"Unknown command: '{command}'")
        print("")
        print("Available commands: setup, test, demo, config, help")
        print("Use 'python run help' for more information")
        return 1


if __name__ == "__main__":
    sys.exit(main())
